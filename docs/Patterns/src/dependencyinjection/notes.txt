If the Java class creates an instance of another class via the new operator, it
cannot be used (and tested) independently from this class and this is called a
hard dependency. The following example shows a class which has no hard
dependencies.

1. Service components should be designed with base class or interface. It's
   better to prefer interfaces or abstract classes that would define contract
   for the services.
2. Consumer classes should be written in terms of service interface.
3. Injector classes that will initialize the services and then the consumer
   classes.
   
->> Service Components (dependencyinjection.service) <<-
MessageService (Interface) -- sendMessage(String msg, String rec)
EmailServiceImpl
SMSServiceImpl

** We are not required to have base interfaces for consumer classes but I will
   have a Consumer interface declaring contract for consumer classes.
   
->> Service Consumers (dependencyinjection.consumer) <<-
Consumer (Interface) -- processMessages(String msg, String rec)
MyDIApplication

** Notice that our application class is just using the service. It does not
   initialize the service that leads to better "separation of concerns". Also
   use of service interface allows us to easily test the application by mocking
   the MessageService and bind the services at runtime rather than compile time.

   Now we are ready to write java dependency injector classes that will
   initialize the service and also consumer classes.

->> Injector Classes <<-
MessageServiceInjector (Interface) -- getConsumer()
EmailServiceInjector
SMSServiceInjector


PROS:
	- Separation of concerns
	- Boilerplate code reduction in app. classes because all work to initialize
	  dependencies is handled by the injector component
	- Configurable components makes apps. easily extendable
	- Unit testing is easy w/ mock objs.
	
CONS:
	- If overused it can lead to maintenance issues because effect of changes
	  are known at runtime
	- DI in Java hides the service class dependencies that can lead to runtime
	  errors that would have been caught at compile time
